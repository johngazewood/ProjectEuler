package problem11thru20;

import java.util.Collection;
import java.util.Map;

import utility.Prime;
import utility.Print;

public class Problem12 {

	/*
	 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
	 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
	 * Let us list the factors of the first seven triangle numbers:
	 *   1: 1
	 *   3: 1,3
	 *   6: 1,2,3,6
	 *  10: 1,2,5,10
	 *  15: 1,3,5,15
	 *  21: 1,3,7,21
	 *  28: 1,2,4,7,14,28
	 *  
	 *  We can see that 28 is the first triangle number to have over five divisors.
	 *  What is the value of the first triangle number to have over five hundred divisors?
	 */
	
	public static void main(String[] args) {
//		int n = 5;
//		int n = 8;
		int n = 500;
		long answer = highlyDivisiableTriangularNumber(n);
		Print.answer(answer);
		// 76576500
	}

	private static long highlyDivisiableTriangularNumber(int n) {
		boolean found = false;
		long position = 0;
		long triangleNumber = 0;
		
		while (!found) {
			position++;
			triangleNumber += position;
//			System.out.println("position "+position+", triangleNumber: " + triangleNumber);
			found = triangleNumberHasMoreThanNDivisors(triangleNumber, n);
		}
		return triangleNumber;
	}

	private static boolean triangleNumberHasMoreThanNDivisors(long t, int n) {
		Map<Long, Integer> primeDivisors = Prime.getMapOfPrimeDivisorsToPowers(t);
		Collection<Integer> powers = primeDivisors.values();
		long numberOfChoices = numberOfChoices(powers);
		System.out.println(String.format("number of choices for %s is %s", t, numberOfChoices));
		return numberOfChoices > n;
	}

	private static long numberOfChoices(Collection<Integer> powers) {
		long product = 1;
		for (Integer power : powers) {
			product *= (power+1);
		}
		return product;
	}

}
